LDI $0 # Carrega o acumulador com o valor 0 # INICIALIZACAO/ SETUP -> APAGAR LEDS E ZERAR OS DISPLAYS
STA @256 # Armazena o valor do acumulador em no LEDR0 ~ LEDR7
STA @257 # Armazena o valor do acumulador no LEDR8
STA @258 # Armazena o valor do acumulador em LEDR9
STA @288 # Armazena o valor do acumulador em HEX0
STA @289 # Armazena o valor do acumulador em HEX1
STA @290 # Armazena o valor do acumulador em HEX2
STA @291 # Armazena o valor do acumulador em HEX3
STA @292 # Armazena o valor do acumulador em HEX4
STA @293 # Armazena o valor do acumulador em HEX5
LDI $0 # Carrega o acumulador com o valor 0 # INICIALIZAR ENDEREÇOS DAS UNIDADES/DEZENAS ... (LIMITADO A 999.999)
STA @0 # Armazena o valor do acumulador em MEM[0] (unidades)
STA @1 # Armazena o valor do acumulador em MEM[1] (dezenas)
STA @2 # Armazena o valor do acumulador em MEM[2] (centenas)
STA @3 # Armazena o valor do acumulador em MEM[3] (milhar)
STA @4 # Armazena o valor do acumulador em MEM[4] (dezenas de milhar)
STA @5 # Armazena o valor do acumulador em MEM[5] (centenas de milhar)
LDI $0 # Carrega o acumulador com o valor 0 # INICIALIZANDO CONSTANTES E VARIÁVEIS ÚTEIS
STA @6 # Armazena o valor do acumulador em MEM[6] (flag de inibir contagem)
STA @7 # Armazena o valor do acumulador em MEM[7] (variável 0 para comparações)
LDI $1 # Carrega o acumulador com o valor 1
STA @8 # Armazena o valor do acumulador em MEM[8] (variável 1 para incremento)
LDI $10 # Carrega o acumulador com o valor 10
STA @9 # Armazena o valor do acumulador em MEM[9] (variável 10 para comparações)
LDI $9 # Carrega o acumulador com o valor 9
STA @10 # Armazena o valor do acumulador em MEM[10] (valor limite para UNIDADE)
STA @11 # Armazena o valor do acumulador em MEM[11] (valor limite para DEZENA)
STA @12 # Armazena o valor do acumulador em MEM[12] (valor limite para CENTENA)
STA @13 # Armazena o valor do acumulador em MEM[13] (valor limite para MILHAR)
STA @14 # Armazena o valor do acumulador em MEM[14] (valor limite para DEZENA DE MILHAR)
STA @15 # Armazena o valor do acumulador em MEM[15] (valor limite para CENTENA DE MILHAR )
LOOP_PRINCIPAL:
NOP # LOOP PRINCIPAL
LDA @6 # Carregando o acumulador com o valor da flag de inibir
CEQ @8 # Compara com 1 para ver se a flag está ativada
JEQ @40 # Se for igual, pula pra leitura de config limite
LDA @352 # Carrega o acumulador com a leitura do botão KEY0
CEQ @7 # Compara com 0, se igual 0 -> botão não apertado. igual a 1 -> vai pra contagem
JEQ @40 # Se for 0, vai ler a proxima chave
JSR INCREMENTO    # Se for 1, vai pra sub-rotina de incremento
NOP      # Aqui é onde o RET volta
LDA @353  # Carrega o acumulador com a leitura do botão KEY1
CEQ @7 # Compara com 0, se igual 0 -> botão não apertado. igual a 1 -> vai pra configuracao do limite de contagem
JEQ @45 # Se for 0, vai pro LIMITE - JSR DE BAIXO
JSR CONFIG_LIMITE     # Se for 1, vai pra sub-rotina de configuracao
NOP      # Onde o RET volta
JSR VERIF_LIMITE    # Chama a sub rotina para verificar o limite
NOP # Aqui é onde o RET volta
LDA @356 # Carrega o acumulador com a leitura do botão FPGA_RESET 
CEQ @8    # Compara com 1
JEQ @51  # Se for 1, daí vai pra subrotina pra reiniciar a contagem
JSR RESET_CONTAG
JSR ATUALIZA_TELA
JMP LOOP_PRINCIPAL
INCREMENTO:
STA @511 # Limpa a leitura do botão
LDA @6 # Carregando o acumulador com o valor da flag de inibir
CEQ @8 # Compara com 1 para ver se a flag está ativada
JEQ @113 #Vai pro RET final da funcao
LDA @0 # [UNIDADES] Carrega o valor de MEM[0] no acumulador 
SOMA @8 # Soma valor das unidades com 1 e guarda em REG 
CEQ @9 # Compara o valor do REG com 10, se for igual a 10, vai pras dezenas
JEQ @63 # Vai para Dezenas
STA @0 # Se não for igual, guarda soma nas unidades
RET # E retorna
LDA @7 #Carrega 0 no REG
STA @0 # Carrega 0 nas unidades
LDA @1 # [DEZENAS] Carrega o valor de MEM[1] no acumulador
SOMA @8 # Soma valor das dezenas com 1 e guarda em REG
CEQ @9 # Compara o valor do REG com 10, se for igual a 10, vai pras centenas
JEQ @71 # Vai para Centenas
STA @1 # Se não for igual, guarda nas dezenas
RET # E retorna
LDA @7 #Carrega 0 no REG
STA @1 # Carrega 0 nas dezenas
LDA @2 # [CENTENAS] Carrega o valor de MEM[2] no acumulador
SOMA @8 # Soma valor das centenas com 1 e guarda em REG
CEQ @9 # Compara o valor do REG com 10, se for igual a 10, vai pros milhares
JEQ @79 # Vai para o Milhar
STA @2 # Se não for igual, guarda nas centenas
RET # E retorna
LDA @7 #Carrega 0 no REG
STA @2 # Carrega 0 nas centenas
LDA @3 # Carrega o valor de MEM[3] (milhar) no acumulador
SOMA @8 # Soma valor dos milhares com 1 e guarda em REG
CEQ @9 # Compara o valor do REG com 10, se for igual a 10, vai pros dezenas de milhar
JEQ @87 # Vai para o DezMilhar
STA @3 # Se não for igual, guarda nas centenas
RET # E retorna
LDA @7 #Carrega 0 no REG
STA @3 # Carrega 0 no milhar
LDA @4 # Carrega o valor de MEM[4] (dezenas de milhar) no acumulador
SOMA @8 # Soma valor dos milhares com 1 e guarda em REG
CEQ @9 # Compara o valor do REG com 10, se for igual a 10, vai pros centenas de milhar
JEQ @95 # Vai pro CentMilhar
STA @4 # Se não for igual, guarda nas centenas
RET # E retorna
LDA @7 #Carrega 0 no REG
STA @4 # Carrega 0 nas dezenas de milhar
LDA @5 # Carrega o valor de MEM[5] (centenas de milhar) no acumulador
SOMA @8 # Soma valor dos milhares com 1 e guarda em REG
CEQ @9 # Compara o valor do REG com 10, se for igual a 10, vai pro LIMITE
JEQ @103 # Vai ativar flag e acender LED
STA @5 # Se não for igual, guarda nas centenas
RET # E retorna
LDA @8 # Carrega a constante 1 no REG
STA @6 # Ativa a flag de inibir a contagem
STA @258 # Armazena o valor do acumulador em LEDR9 indicando OVERFLOW
LDI $9 # Não deixar somar, voltar pro máximo máximo permitido
STA @0 #Guarda 9 nas unidades
STA @1 #Guarda 9 nas dezenas
STA @2 #Guarda 9 nas centenas
STA @3 #Guarda 9 nos milhares
STA @4 #Guarda 9 nas dezenas de milhar
STA @5 #Guarda 9 nas centenas de milhar
RET
CONFIG_LIMITE:
STA @510 # Para limpar a leitura do botão 1
LDA @8 # Carrega 1
STA @256 # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353 # Guarda a leitura de KEY1
CEQ @7 #Compara com o valor 0
LDA @320 # Ler as chaves e jogar o valor no REG
JEQ @115
STA @10 # Guarda o valor limite nas unidades
STA @510 # Para limpar a leitura do botão 1
LDI $2 # Carrega 2
STA @256 # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353 # Guarda a leitura de KEY1
CEQ @7 #Compara com o valor 0
LDA @320 # Lê de novo o valor das chaves e joga no REG
JEQ @123 # Volta pro inicio desse bloco
STA @11 # Guarda o valor limite nas dezenas
STA @510 # Para limpar a leitura do botão 1
LDI $4 # Carrega 4
STA @256 # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353 # Guarda a leitura de KEY1
CEQ @7 #Compara com o valor 0
LDA @320 # Lê de novo o valor das chaves e joga no REG
JEQ @131  # Volta pro inicio desse bloco
STA @12 # Guarda o valor limite nas centenas
STA @510 # Para limpar a leitura do botão 1
LDI $8 # Carrega 8
STA @256 # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353 # Guarda a leitura de KEY1
CEQ @7 #Compara com o valor 0
LDA @320 # Lê de novo o valor das chaves e joga no REG
JEQ @139
STA @13 # Guarda o valor limite nas milhar
STA @510 # Para limpar a leitura do botão 1 
LDI $16 # Carrega 16
STA @256 # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353 # Guarda a leitura de KEY1
CEQ @7 #Compara com o valor 0
LDA @320 # Lê de novo o valor das chaves e joga no REG
JEQ @147
STA @14 # Guarda o valor limite nas dezena de milhar
STA @510 # Para limpar a leitura do botão 1
LDI $32 # Carrega 32
STA @256 # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353 # Guarda a leitura de KEY1
CEQ @7 #Compara com o valor 0
LDA @320 # Lê de novo o valor das chaves e joga no REG
JEQ @155
STA @15 # Guarda o valor limite nas dezena de milhar
STA @510 # Para limpar a leitura do botão 1
LDA @7 # Carrega o 0 
STA @256 # Desliga os LEDS
RET
VERIF_LIMITE:
LDA @0 #Carrega as unidades
CEQ @10 #Compara com o limite das unidades
JEQ @170 # Pula para a próxima conferência
RET # Caso o contrário já Retorna
LDA @1 #Carrega as dezenas
CEQ @11 #Compara com o limite das dezenas
JEQ @174 # Pula para a próxima conferência
RET # Caso o contrário já Retorna
LDA @2 #Carrega as centenas
CEQ @12 #Compara com o limite das centenas
JEQ @178 # Pula para a próxima conferência
RET # Caso o contrário já Retorna
LDA @3 #Carrega o milhar
CEQ @13 #Compara com o limite dos milhares
JEQ @182 # Pula para a próxima conferência
RET # Caso o contrário já Retorna
LDA @4 #Carrega as dezenas de milhar
CEQ @14 #Compara com o limite das dezenas de milhar
JEQ @186 # Pula para a próxima conferência
RET # Caso o contrário já Retorna
LDA @5 #Carrega as dezenas de centenas de milhar
CEQ @15 #Compara com o limite das centenas de milhar
JEQ @190 # Pula para a próxima linha de setar flag
RET # Caso o contrário já Retorna
LDA @8
STA @257 # Armazena o valor do acumulador no LEDR8
STA @6 #  flag de inibir contagem vai pra 1
RET
RESET_CONTAG:
LDA @7 # Guarda o 0 no registrador
STA @0 # Armazena o valor do acumulador em MEM[0] (unidades)
STA @1 # Armazena o valor do acumulador em MEM[1] (dezenas)
STA @2 # Armazena o valor do acumulador em MEM[2] (centenas)
STA @3 # Armazena o valor do acumulador em MEM[3] (milhar)
STA @4 # Armazena o valor do acumulador em MEM[4] (dezenas de milhar)
STA @5 # Armazena o valor do acumulador em MEM[5] (centenas de milhar)
STA @6 # Armazena o valor do acumulador em MEM[6] (flag de inibir contagem)
STA @257 # Armazena o valor do acumulador no LEDR8
STA @258 # Armazena o valor do acumulador em LEDR9
RET
ATUALIZA_TELA:
LDA @0 # Carrega o valor da unidade
STA @288 # Guarda o valor das unidades no HEX0
LDA @1 # Carrega o valor da dezena
STA @289 # Guarda o valor das dezenas no HEX1
LDA @2 # Carrega o valor da centena
STA @290 # Guarda o valor das centenas no HEX2
LDA @3 # Carrega o valor do milhar
STA @291 # Guarda o valor do milhar no HEX3
LDA @4 # Carrega o valor da dezena de milhar
STA @292 # Guarda o valor das dezenas de milhar no HEX4
LDA @5 # Carrega o valor da centena de milhar
STA @293 # Guarda o valor das centenas de milhar no HEX5
RET