LDI $0, R0      # Inicializando algumas variáveis importantes : R0 = 0
LDI $1, R1      # R1 = 1
LDI $6, R2      # R2 = 6
LDI $10, R3     # R3 = 10
STA @256, R0    # Armazena o valor do R0 no LEDR0 ~ LEDR7
STA @257, R0    # Armazena o valor do R0 no LEDR8
STA @258, R0    # Armazena o valor do R0 no LEDR9
STA @288, R0    # Armazena o valor do R0 no HEX0
STA @289, R0    # Armazena o valor do R0 no HEX1
STA @290, R0    # Armazena o valor do R0 no HEX2
STA @291, R0    # Armazena o valor do R0 no HEX3
STA @292, R0    # Armazena o valor do R0 no HEX4
STA @293, R0    # Armazena o valor do R0 no HEX5
STA @0, R0      # Armazena o valor do R0 em MEM[0] (unidades)
STA @1, R0      # Armazena o valor do R0 em MEM[1] (dezenas)
STA @2, R0      # Armazena o valor do R0 em MEM[2] (centenas)
STA @3, R0      # Armazena o valor do R0 em MEM[3] (milhar)
STA @4, R0      # Armazena o valor do R0 em MEM[4] (dezenas de milhar)
STA @5, R0      # Armazena o valor do R0 em MEM[5] (centenas de milhar)
STA @6, R0      # Armazena o valor do R0 em MEM[6] (flag de inibir contagem)
STA @7, R0      # Armazena o valor do R0 em MEM[7] (variável 0 para comparações)
STA @8, R1      # Armazena o valor do R1 em MEM[8] (variável 1 para incremento)
STA @9, R3      # Armazena o valor do R3 em MEM[9] (variável 10 para comparações)
STA @10, R2     # Armazena o valor do R2 em MEM[10] (valor limite para UNIDADE)
STA @11, R2     # Armazena o valor do R2 em MEM[11] (valor limite para DEZENA)
STA @12, R2     # Armazena o valor do R2 em MEM[12] (valor limite para CENTENA)
STA @13, R2     # Armazena o valor do R2 em MEM[13] (valor limite para MILHAR)
STA @14, R2     # Armazena o valor do R2 em MEM[14] (valor limite para DEZENA DE MILHAR)
STA @15, R2     # Armazena o valor do R2 em MEM[15] (valor limite para CENTENA DE MILHAR )
STA @16, R2     # Armazena o valor do R2 em MEM[16] (constante 6)
LDI $2, R0      # Carrega 2 no registrador R0
STA @17, R0     # Armazena o valor do R0 em MEM[17] (constante 2)
LDI $4, R0      # Carrega 4 no registrador R0
STA @18, R0     # Armazena o valor do R0 em MEM[18] (constante 4)
LOOP_PRINCIPAL:
NOP              # LOOP PRINCIPAL
LDA @6, R0       # Carregando o R0 com o valor da flag de inibir
CEQ @8, R0       # Compara com 1 para ver se a flag está ativada
JEQ @LEITURA_KEY1 # Se for igual, pula pra leitura de KEY1
LDA @352, R0     # Carrega o R0 com a leitura do botão KEY0
ANDI @1, R0      # Aplica máscara na leitura do botão
CEQ @7, R0       # Compara com 0
JEQ @LEITURA_KEY1 # Se for 0, vai ler a proxima chave
JSR @INCREMENTO  # Se for 1, vai pra sub-rotina de incremento
NOP              # Aqui é onde o RET volta
LEITURA_KEY1:
LDA @353, R1     # Carrega o R1 com a leitura do botão KEY1
ANDI @1, R1      # Aplica máscara na leitura do botão
CEQ @7, R1       # Compara com 0
JEQ @CHAMA_CONFERE_LIMITE # Se for 0, vai conferir o limite 
JSR @CONFIG_LIMITE   # Se for 1, vai pra sub-rotina de configuração de limite
NOP              # Aqui é onde o RET volta
CHAMA_CONFERE_LIMITE:
JSR @CONFERE_LIMITE  # Chama a sub-rotina para verificar o limite
NOP              # Aqui é onde o RET volta
LDA @356, R3     # Carrega o R3 com a leitura do botão FPGA_RESET 
ANDI @1, R3      # Aplica máscara na leitura do botão
CEQ @8, R3       # Compara com 1
JEQ @57          # Se for 1, vai pra subrotina pra reiniciar a contagem
JSR @REINICIAR_CONTAGEM  # Chama sub-rotina de reiniciar a contagem
JSR @ATUALIZA_SEVEN_SEG  # Chama sub-rotina de atualizar o display de sete segmentos
JMP @LOOP_PRINCIPAL      # Volta para o início do loop principal
INCREMENTO:
STA @511, R0     # Limpa a leitura do botão KEY0
LDA @6, R1       # Carrega o valor da flag de inibir contagem no R1
CEQ @8, R1       # Compara com 1 para ver se a flag está ativada
JEQ @125         #Se for 1, não incrementa e vai pro RET
INC_UNIDADE:
LDA @0, R0       # Carrega o valor das unidades em R0
SOMA @8, R0      # Soma com 1 e guarda resultado em R0
CEQ @9, R0       # Compara com 10
JEQ @INC_DEZENA  # Se for 10, vai para as dezenas
STA @0, R0       # Se não, armazena o valor das unidades
RET              # E retorna
INC_DEZENA:
LDA @7, R0      # Carrega 0 no R0
STA @0, R0      # Carrega 0 nas unidades
LDA @1, R0      # Carrega o valor das dezenas em R0
SOMA @8, R0     # Soma com 1 e guarda resultado em R0
CEQ @16, R0      # Compara com 6
JEQ @INC_CENTENA # Se for 10, vai para as centenas
STA @1, R0      # Se não, armazena o valor das dezenas
RET             # E retorna
INC_CENTENA:
LDA @7, R0      #Carrega 0 no REG
STA @1, R0      # Carrega 0 nas dezenas
LDA @2, R0      # Carrega o valor das centenas em R0
SOMA @8, R0     # Soma com 1 e guarda resultado em R0
CEQ @9, R0      # Compara com 10
JEQ @INC_MILHAR # Se for 10, vai para o milhar
STA @2, R0      # Se não, armazena o valor das centenas
RET             # E retorna
INC_MILHAR:
LDA @7, R0      # Carrega 0 no R0
STA @2, R0      # Carrega 0 nas centenas
LDA @3, R0      # Carrega o valor dos milhares em R0
SOMA @8, R0     # Soma com 1 e guarda resultado em R0
CEQ @16, R0      # Compara com 6
JEQ @INC_DEZMILHAR  # Se for 10, vai para as dezenas de milhar
STA @3, R0      # Se não, armazena o valor dos milhares
RET             # E retorna
INC_DEZMILHAR:
LDA @7, R0      # Carrega 0 no R0
STA @3, R0      # Carrega 0 no milhar
LDA @4, R0      # Carrega o valor das dezenas de milhar
SOMA @8, R0     # Soma com 1 e guarda resultado em R0
CEQ @18, R0      # Compara com 4
JEQ @INC_CENTMILHAR # Se for 4, vai para a centena de milhar
STA @4, R0      # Armazena o valor das dezena de milhar
RET             # E retorna
INC_CENTMILHAR:
LDA @7, R0      # Carrega 0 no R0
STA @4, R0      # Carrega 0 nas dezenas de milhar
LDA @5, R0      #Carrega o valor das centenas de milhar
SOMA @8, R0     # Soma com 1 e guarda resultado em R0
CEQ @17, R0      # Compara com 2
JEQ @OVERFLOW   # Se for 2, vai para o overflow
STA @5, R0      # Se não, armazena o valor das centena de milhar
RET             # E retorna
OVERFLOW:
LDA @8, R2      # Carrega o valor 1 em R2
STA @6, R2      # Armazena o valor 1 na flag de inibir contagem
STA @258, R2    # Armazena o valor 1 no LEDR9 indicando OVERFLOW
LDI $9, R3      # Não deixar somar, volta pro máximo permitido - Carrega 9 em R3
LDA @7, R0      # Armazena o valor 0 em R0
LDA @17, R1     # Armazena o valor 2 em R1
LDA @18, R2     # Armazena o valor 4 em R2 
STA @0, R0      #Guarda 9 nas unidades
STA @1, R0      #Guarda 9 nas dezenas
STA @2, R0      #Guarda 9 nas centenas
STA @3, R0      #Guarda 9 nos milhares
STA @4, R2      #Guarda 9 nas dezenas de milhar
STA @5, R1      #Guarda 9 nas centenas de milhar
RET
CONFIG_LIMITE:
STA @510, R0    # Para limpar a leitura do botão 1
STA @6, R3      # Carrega a flag de inibir contagem em R3
CEQ @7, R3      # Compara a flag de inibir com 0
JEQ @LIM_UNIDADE # Se for 0, então começa a configurar
LDA @7, R3      # Se for 1, tem que voltar para 0
STA @6, R3      # Guardo 0 na flag de inibir contagem
STA @257, R3    # Guardo 0 no LED8
LIM_UNIDADE:
LDA @8, R1      # Carrega 1 em R1
STA @256, R1    # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353, R0    # Guarda a leitura de KEY1 em R0
ANDI @1, R0     # Depois de fazer a leitura do botão aplica a máscara
CEQ @7, R0      #Compara com o valor 0
LDA @320, R2    # Lê as chaves e salva o valor delas no R2
JEQ @LIM_UNIDADE # Caso botão não tenha sido apertado volta novamente para ler KEY1
STA @10, R2     # Guarda o valor limite nas unidades
STA @510, R0    # Para limpar a leitura do botão 1
LIM_DEZENA:
LDI $2, R1      # Carrega 2 em R1
STA @256, R1    # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das dezenas
LDA @353, R0    # Guarda a leitura de KEY1 em R0
ANDI @1, R0     # Depois de fazer a leitura do botão aplica a máscara
CEQ @7, R0      #Compara com o valor 0
LDA @320, R2    # Lê de novo o valor das chaves e salva no R2
JEQ @LIM_DEZENA # Caso botão não tenha sido apertado volta novamente para ler KEY1
STA @11, R2     # Guarda o valor limite nas dezenas
STA @510, R0    # Para limpar a leitura do botão 1
LIM_CENTENA:
LDI $4, R1      # Carrega 4 em R1
STA @256, R1    # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das centenas
LDA @353, R0    # Guarda a leitura de KEY1
ANDI @1, R0     # Depois de fazer a leitura do botão aplica a máscara
CEQ @7, R0      # Compara com o valor 0
LDA @320, R2    # Lê de novo o valor das chaves e salva no R2
JEQ @LIM_CENTENA  # Caso botão não tenha sido apertado volta novamente para ler KEY1
STA @12, R2     # Guarda o valor limite nas centenas
STA @510, R0    # Para limpar a leitura do botão 1
LIM_MILHAR:
LDI $8, R1      # Carrega 8 em R1
STA @256, R1    # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave do milhar
LDA @353, R0    # Guarda a leitura de KEY1
ANDI @1, R0     # Depois de fazer a leitura do botão aplica a máscara
CEQ @7, R0      # Compara com o valor 0
LDA @320, R2    # Lê de novo o valor das chaves e salva no R2
JEQ @LIM_MILHAR  # Caso botão não tenha sido apertado volta novamente para ler KEY1
STA @13, R2     # Guarda o valor limite nos milhares
STA @510, R0    # Para limpar a leitura do botão 1 
LIM_DEZMILHAR:
LDI $16, R1     # Carrega 16 em R1
STA @256, R1    # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das dezenas de milhar
LDA @353, R0    # Guarda a leitura de KEY1
ANDI @1, R0     # Depois de fazer a leitura do botão aplica a máscara
CEQ @7, R0      # Compara com o valor 0
LDA @320, R2    # Lê de novo o valor das chaves e salva no R2
JEQ @LIM_DEZMILHAR # Caso botão não tenha sido apertado volta novamente para ler KEY1
STA @14, R2     # Guarda o valor limite nas dezenas de milhar
STA @510, R0    # Para limpar a leitura do botão 1
LIM_CENTMILHAR:
LDI $32, R1     # Carrega 32 em R0
STA @256, R1    # Liga o LED 0 ~ 7 dizendo que está pronto pra ler a chave das unidades
LDA @353, R0    # Guarda a leitura de KEY1
ANDI @1, R0     # Depois de fazer a leitura do botão aplica a máscara
CEQ @7, R0      #Compara com o valor 0
LDA @320, R2    # Lê de novo o valor das chaves e salva no R2
JEQ @LIM_CENTMILHAR # Caso botão não tenha sido apertado volta novamente para ler KEY1
STA @15, R2     # Guarda o valor limite nas centenas de milhar
STA @510, R0    # Para limpar a leitura do botão 1
LDA @7, R3      # Carrega o 0 em R3
STA @256, R3    # Desliga os LEDS
RET
CONFERE_LIMITE:
NOP             # Aqui começa a conferência dos limites
CONFERE_LIMITE_UNIDADE:
LDA @0, R0      # Carrega o valor das unidades em R0
CEQ @10, R0     # Compara com o limite de unidades
JEQ @CONFERE_LIMITE_DEZENA # Se for 0, vai para a dezena
RET             # Caso o contrário já retorna
CONFERE_LIMITE_DEZENA:
LDA @1, R1      # Carrega o valor das dezenas em R1
CEQ @11, R1     # Compara com o limite de dezenas
JEQ @CONFERE_LIMITE_CENTENA # Se for 0, vai para a centena
RET             # Caso o contrário já retorna
CONFERE_LIMITE_CENTENA:
LDA @2, R2      #Carrega o valor das centenas em R2
CEQ @12, R2     #Compara com o limite das centenas
JEQ @CONFERE_LIMITE_MILHAR # Se for 0, vai para os milhares
RET             # Caso o contrário já retorna
CONFERE_LIMITE_MILHAR:
LDA @3, R3      #Carrega o valor dos milhares em R3
CEQ @13, R3     #Compara com o limite dos milhares
JEQ @CONFERE_LIMITE_DEZMILHAR # Se for 0, vai para as dezenas de milhr
RET             # Caso o contrário já retorna
CONFERE_LIMITE_DEZMILHAR:
LDA @4, R0      #Carrega o valor das dezenas de milhar em R0
CEQ @14, R0     #Compara com o limite das dezenas de milhar
JEQ @CONFERE_LIMITE_CENTMILHAR # Se for 0, vai para as centenas de milhar
RET             # Caso o contrário já retorna
CONFERE_LIMITE_CENTMILHAR:
LDA @5, R1      #Carrega as dezenas de centenas de milhar em R1
CEQ @15, R1     #Compara com o limite das centenas de milhar
JEQ @ATIVAR_FLAG_INIBIR_CONTAGEM # Se for 0, vai ativar a flag de inibir a contagem
RET             # Caso o contrário já retorna
ATIVAR_FLAG_INIBIR_CONTAGEM:
LDA @8, R2      # Carrega o valor 1
STA @257, R2    # Armazena o valor 1 no LED8
STA @6, R2      # Armazena o valor 1 na flag de inibir contagem
RET
REINICIAR_CONTAGEM:
LDA @7, R0      # Carrega o acumulador com o valor 0
STA @0, R0      #  Armazena o valor 0 nas unidades
STA @1, R0      #  Armazena o valor 0 nas dezenas
STA @2, R0      #  Armazena o valor 0 nas centenas
STA @3, R0      #  Armazena o valor 0 nos milhares
STA @4, R0      #  Armazena o valor 0 nas dezenas de milhar
STA @5, R0      #  Armazena o valor 0 nas centenas de milhar
STA @6, R0      # Armazena o valor 0 na flag de inibir contagem
STA @257, R0    # Armazena o valor 0 no LED8
STA @258, R0    # Armazena o valor 0 no LED9
RET
ATUALIZA_SEVEN_SEG:
LDA @0, R0      # Carrega o valor das unidades em R0
STA @288, R0    # Guarda o valor das unidades no HEX0
LDA @1, R0      # Carrega o valor das dezenas em R0
STA @289, R0    # Guarda o valor das dezenas no HEX1 
LDA @2, R0      # Carrega o valor das centenas em R0
STA @290, R0    # Guarda o valor das centenas no HEX2
LDA @3, R0      # Carrega o valor dos milhares em R0
STA @291, R0    # Guarda o valor do milhar no HEX3
LDA @4, R0      # Carrega o valor das dezenas de milhar em R0
STA @292, R0    # Guarda o valor das dezenas de milhar no HEX4
LDA @5, R0      # Carrega o valor das centenas de milhar em R0
STA @293, R0    # Guarda o valor das centenas de milhar no HEX5
RET
