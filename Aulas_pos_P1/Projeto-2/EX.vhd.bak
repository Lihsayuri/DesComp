LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL; --Soma (esta biblioteca =ieee)

ENTITY EX IS
    GENERIC (
        larguraDados : NATURAL := 32;
        larguraEnderecos : NATURAL := 32
    );
    PORT (
        CLK : IN STD_LOGIC;
        decoder_OUT : IN STD_LOGIC_VECTOR(13 DOWNTO 0);
        somador_constante_OUT_ID: IN STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0);
        RS_OUT_EX : IN STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0);
        RT_OUT_EX : IN STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0);
        imediato_estendido_EX : IN STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0);
        somador_BEQ_OUT : OUT STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0);
        ULA_result : OUT STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0);
        ULA_FLAG_ZERO : OUT STD_LOGIC;
        RT_OUT_EX : OUT STD_LOGIC_VECTOR((larguraDados - 1) DOWNTO 0)
        
    );
END ENTITY;

ARCHITECTURE execute OF EX IS

    SIGNAL CLK : STD_LOGIC;
    SIGNAL ULA_ctrl : STD_LOGIC_VECTOR(2 DOWNTO 0); 
    SIGNAL imediatoEstendido : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0);
    SIGNAL imediatoEstendidoShiftado : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0);
    SIGNAL Rt_OUT : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0);
    SIGNAL MUX_ULA_B : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0);
    SIGNAL Rs_ULA_A : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0);
    SIGNAL ULA_OUT : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0);
    SIGNAL ULA_FLAG : STD_LOGIC;

    ALIAS SelImediatoReg : STD_LOGIC IS decoder_OUT(7);
    ALIAS PC_constante : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0) IS somador_constante_OUT_ID;
    ALIAS Rs_ULA_A : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0) IS RS_OUT_EX;
    ALIAS Rt_OUT : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0) IS RT_OUT_EX;
    ALIAS imediato_estendido_EX : STD_LOGIC_VECTOR(larguraDados - 1 DOWNTO 0) IS imediatoEstendido;

BEGIN

    ShiftSinal : ENTITY work.shiftSinal GENERIC MAP (larguraDados => larguraDados, deslocar => 2)
    PORT MAP(
        entrada => imediatoEstendido,
        saida => imediatoEstendidoShiftado
    );

    Somador2 : ENTITY work.somadorGenerico GENERIC MAP (larguraDados => larguraEnderecos)
    PORT MAP(
        entradaA => PC_constante,
        entradaB => imediatoEstendidoShiftado,
        saida => somador_OUT
    );

    -- O port map completo do Mux que decide a entrada B da ULA:						
    MUX_RT_IMEDIATO : ENTITY work.muxGenerico2x1 GENERIC MAP (larguraDados => larguraDados)
    PORT MAP(
        entradaA_MUX => Rt_OUT,
        entradaB_MUX => imediatoEstendido,
        seletor_MUX => SelImediatoReg,
        saida_MUX => MUX_ULA_B
    );


    ULA1 : ENTITY work.ULASomaSub GENERIC MAP(larguraDados => larguraDados)
    PORT MAP(
        entradaA => Rs_ULA_A,
        entradaB => MUX_ULA_B,
        seletor => ULA_ctrl(1 downto 0),
        inverteB => ULA_ctrl(2),
        saida => ULA_OUT,
        flagZero => ULA_FLAG
    );

    somador_BEQ_OUT <= somador_OUT;
    ULA_FLAG_ZERO <= ULA_FLAG;
    ULA_result <= ULA_OUT;
    RT_OUT_EX <= Rt_OUT;

END ARCHITECTURE;